import sys
import pandas as pd
import os
import xml.etree.ElementTree as etree

# TODO: add new time stamp sources
# get times from rpp
# get times from csv
# get times from sbet (only start/stop)
# get times from trj
# get times from trj shape


def get_times_from_mission_csv(mission_file):
    """ Parse a per-line mission csv file or sensor rpp file and extract start and stop times for
    comparison to aimms probe and solar data. Typically the mission csv file is generated by the initial bridge
    team qc and extraction scripts and will be available in the same directory as the .rpp.

    Parameters
    ----------
    mission_file : str
       Path to a mission csv or rpp.

    Returns
    -------
    lidar_start_time
    lidar_end_time
    """
    if mission_file.upper().endswith(".CSV"):
        mission_csv_df = pd.read_csv(mission_file, sep=',', usecols=['timeStart', 'timeEnd'])
        mission_csv_df['timeStart'] = pd.to_datetime(mission_csv_df['timeStart'], format='%H:%M:%S.%f')
        mission_csv_df['timeEnd'] = pd.to_datetime(mission_csv_df['timeEnd'], format='%H:%M:%S.%f')
        lidar_start_time = mission_csv_df['timeStart'].iloc[0].time()
        lidar_end_time = mission_csv_df['timeEnd'].iloc[-1].time()
    elif mission_file.upper().endswith(".RPP"):
        lidar_start_time = "00:00:00.0"
        lidar_end_time = "24:00:00.0"
        print("RPP timestamp extraction not yet supported!")
        pass
    else:
        lidar_start_time = "00:00:00.0"
        lidar_end_time = "24:00:00.0"
        print(f"Mission file {mission_file} not recognized.")
        pass

    return lidar_start_time, lidar_end_time


def get_times_from_rpp(in_file):
    """ Placeholder function that will extract times from the sensor rpp file directly. """
    pass


def get_times_from_sbet(in_file):
    """ Placeholder function that will extract times from an SBET file. """
    pass


def get_times_from_trj(in_file):
    """ Placeholder function that will extract times from a TRJ file. """
    pass


def get_times_from_trj_shape(in_file):
    """ Placeholder function that will extract times from a TRJ shape file. """
    pass
